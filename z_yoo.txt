


    import React, { useState } from 'react';
    import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';

    import LandingPage from './Components/Landing-components/LandingPage/LandingPage';
    import Login from './Components/AuthPages/Login/Login';
    import Signup from './Components/AuthPages/Signup/Signup';
    import FarmerOrderHistory from './Components/Farmers-components/FarmersPages/Reports/Reports';
    import BuyerOrderHistory from './Components/Buyers-components/BuyersPages/Reports/Reports';
    import ExtensionOfficerDashboard from './Components/Experts-components/ExpertsPages/Reports/Reports';

    const App = () => {
    const [token, setToken] = useState(localStorage.getItem('token') || '');
    const [userId, setUserId] = useState(localStorage.getItem('userId') || '');

    const handleSetToken = (token) => {
        setToken(token);
        localStorage.setItem('token', token);
    };

    const handleSetUserId = (userId) => {
        setUserId(userId);
        localStorage.setItem('userId', userId);
    };

    return (
        <Router>
        <Routes>
            <Route path="/" element={<LandingPage />} />
            <Route path="/login" element={<Login setToken={handleSetToken} setUserId={handleSetUserId} />} />
            <Route path="/signup" element={<Signup />} />
            <Route path="/farmers/*" element={<FarmerOrderHistory token={token} />} />
            <Route path="/buyers/*" element={<BuyerOrderHistory token={token} />} />
            <Route path="/experts/*" element={<ExtensionOfficerDashboard token={token} userId={userId} />} />
        </Routes>
        </Router>
    );
    };

    export default App;





    import { useState } from 'react'
    import './MergeFarmersLayouts.css'
    import HeaderLayout from '../HeaderLayout/HeaderLayout'
    import SideBarLayout from '../SideBarLayout/SideBarLayout'
    import PagesLayout from '../PagesLayout/PagesLayout'

    const MergeFarmersLayouts = () => {
        const [openSidebarToggle, setOpenSidebarToggle] = useState(false)

        const OpenSidebar = () => {
        setOpenSidebarToggle(!openSidebarToggle);
        }
    return (
        <>
            <div className='grid-container'>
                <HeaderLayout OpenSidebar={OpenSidebar}/>
                <SideBarLayout openSidebarToggle={openSidebarToggle} OpenSidebar={OpenSidebar}/>
                <PagesLayout/>    
            </div>    
        </>
    )
    }

    export default MergeFarmersLayouts





    import React from 'react'
    import { Routes, Route } from "react-router-dom";
    import './PagesLayout.css'
    import { BsFillArchiveFill, BsFillGrid3X3GapFill, BsPeopleFill, BsFillBellFill} from 'react-icons/bs'
    import MergeLayouts from '../MergeFarmersLayouts/MergeFarmersLayouts';
    import CropInfo from '../../FarmersPages/CropInfo/CropInfo';
    import MarketProducts from '../../FarmersPages/MarketProducts/MarketProducts'
    import Orders from '../../FarmersPages/Orders/Orders'
    import Forum from '../../FarmersPages/Forum/Forum'
    import Consultations from '../../FarmersPages/Consultations/Consultations'
    import Reports from '../../FarmersPages/Reports/Reports';
    import Profile from '../../FarmersPages/Profile/Profile'

    const PagesLayout = () => {

    return (
        <main className='home-main-container'>
        <Routes>
            {/* <Route path='/' element={<CropInfo />}/> */}
            <Route path='/CropInfo' element={<CropInfo/>}/>
            <Route path='/MarketProducts' element={<MarketProducts />}/>
            <Route path='/Orders' element={<Orders />}/>
            <Route path='/Forum' element={<Forum />}/>
            <Route path='/Consultations' element={<Consultations />}/>
            <Route path='/Reports' element={<Reports />}/>
            <Route path='/Profile' element={<Profile />}/>
        </Routes>
        </main>
    )
    }

    export default PagesLayout


    import React, { useState, useEffect, useMemo } from 'react';
    import { Bar } from 'react-chartjs-2';
    import axios from 'axios';
    import 'chart.js/auto';

    const getColor = (() => {
    const colors = {};
    let nextColorIndex = 0;
    const colorPalette = [
        'rgba(75, 192, 192, 0.6)', 'rgba(192, 75, 75, 0.6)', 'rgba(75, 75, 192, 0.6)',
        'rgba(192, 192, 75, 0.6)', 'rgba(192, 75, 192, 0.6)', 'rgba(75, 192, 75, 0.6)',
        // more colors .............
    ];
    
    return (crop) => {
        if (!colors[crop]) {
        colors[crop] = colorPalette[nextColorIndex % colorPalette.length];
        nextColorIndex += 1;
        }
        return colors[crop];
    };
    })();

    const FarmerOrderHistory = ({ token }) => {
    const [orders, setOrders] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);

    useEffect(() => {
        const fetchOrders = async () => {
        try {
            const response = await axios.get('https://tyktyk.pythonanywhere.com/orders/farmer/my_orders/', {
            headers: {
                Authorization: `Token ${token}`,
            },
            });
            setOrders(response.data);
            setLoading(false);
        } catch (error) {
            setError(error);
            setLoading(false);
        }
        };

        fetchOrders();
    }, [token]);

    // Compute the sum of total_cost
    const totalSum = useMemo(() => {
        return orders.reduce((sum, order) => sum + parseFloat(order.total_cost), 0).toFixed(2);
    }, [orders]);

    // Sort orders for table display
    const sortedOrders = useMemo(() => {
        return [...orders].sort((a, b) => new Date(b.created_at) - new Date(a.created_at));
    }, [orders]);

    // Prepare data for the bar chart
    const data = {
        labels: orders.map(order => `${new Date(order.created_at).toLocaleDateString('en-GB')} - ${order.product_name}`),
        datasets: [
        {
            label: 'Quantity',
            data: orders.map(order => parseFloat(order.quantity)),
            backgroundColor: orders.map(order => getColor(order.product_name)),
        },
        ],
    };

    const farmerName = orders.length > 0 ? orders[0].farmer_name : 'Unknown Farmer';

    const styles = {
        body: {
        backgroundColor: '#fff',
        color: 'black',
        textAlign: 'center',
        fontSize: '1em',
        fontFamily: 'Poppins, sans-serif',
        },
        app: {
        fontFamily: 'Arial, sans-serif',
        textAlign: 'center',
        margin: '20px',
        },
        table: {
        margin: '20px auto',
        borderCollapse: 'collapse',
        width: '80%',
        },
        thTd: {
        border: '1px solid #ddd',
        padding: '8px',
        textAlign: 'left',
        },
        th: {
        backgroundColor: '#f2f2f2',
        },
        h1: {
        marginBottom: '20px',
        },
    };

    if (loading) return <div>Loading...</div>;
    if (error) return <div>Error: {error.message}</div>;

    return (
        <div style={styles.app}>
        <h1 style={styles.h1}>My order report --  {farmerName} </h1>
        <table style={styles.table}>
            <thead>
            <tr>
                <th style={{ ...styles.thTd, ...styles.th }}>S/N</th>
                <th style={{ ...styles.thTd, ...styles.th }}>Order Date</th>
                <th style={{ ...styles.thTd, ...styles.th }}>Buyer Name</th>
                <th style={{ ...styles.thTd, ...styles.th }}>Crop</th>
                <th style={{ ...styles.thTd, ...styles.th }}>Quantity</th>
                <th style={{ ...styles.thTd, ...styles.th }}>Total cost</th>
                <th style={{ ...styles.thTd, ...styles.th }}>Status</th>
            </tr>
            </thead>
            <tbody>
            {sortedOrders.map((order, index) => (
                <tr key={index}>
                <td style={styles.thTd}>{index + 1}</td>
                <td style={styles.thTd}>{new Date(order.created_at).toLocaleDateString('en-GB')}</td>
                <td style={styles.thTd}>{order.buyer_name}</td>
                <td style={styles.thTd}>{order.product_name}</td>
                <td style={styles.thTd}>{order.quantity}</td>
                <td style={styles.thTd}>{order.total_cost}</td>
                <td style={{ ...styles.thTd, color: order.processed ? 'green' : 'red' }}>
                    {order.processed ? 'Delivered' : 'Pending'}
                </td>
                </tr>
            ))}
            <tr>
                <td colSpan="5" style={{ ...styles.thTd, textAlign: 'right', fontWeight: 'bold' }}>Total Sum</td>
                <td style={{ ...styles.thTd, fontWeight: 'bold' }}>{totalSum}</td>
                <td style={styles.thTd}></td>
            </tr>
            </tbody>
        </table>
        <Bar data={data} />
        </div>
    );
    };

    export default FarmerOrderHistory;



    this worked in other separate branch trying to fetch data when authenticated

    what do I need to change when fetching crop info related data


    DO I NEED TO MAKE CHANGES IN THE MERGESLYAOUT.JSX LAYOUT.JSX AND OTHER FILES? OR IS EVERY CODE GOOD